AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  SourceBucketName:
    Type: String
    Description: The name of the source S3 bucket
  DestinationBucketName:
    Type: String
    Description: The name of the destination S3 bucket
  CreateSourceBucket:
    Type: String
    Default: 'yes'
    AllowedValues: ['yes', 'no']
    Description: Whether to create the source S3 bucket
  CreateDestinationBucket:
    Type: String
    Default: 'yes'
    AllowedValues: ['yes', 'no']
    Description: Whether to create the destination S3 bucket

Resources:
  HtmlBucket:
    Type: 'AWS::S3::Bucket'
    Condition: ShouldCreateSourceBucket
    Properties:
      BucketName: !Ref SourceBucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .html
            Function: !GetAtt HtmlToJsonLambda.Arn
      
  JsonBucket:
    Type: 'AWS::S3::Bucket'
    Condition: ShouldCreateDestinationBucket
    Properties:
      BucketName: !Ref DestinationBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
  
  HtmlBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref HtmlBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt LambdaExecutionRole.Arn
            Action:
              - s3:GetObject
              - s3:PutObject
            Resource: !Sub arn:aws:s3:::${HtmlBucket}/*

  JsonBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref JsonBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt LambdaExecutionRole.Arn
            Action:
              - s3:GetObject
              - s3:PutObject
            Resource: !Sub arn:aws:s3:::${JsonBucket}/*

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Path: /
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:PutObject
                Resource: '*'

  HtmlToJsonLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: index.lambda_handler
      Runtime: python3.11
      MemorySize: 1024
      Timeout: 300
      Environment:
        Variables:
          JSON_BUCKET: !Ref DestinationBucketName
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref HtmlBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .html

  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt HtmlToJsonLambda.Arn
      Principal: 's3.amazonaws.com'
      SourceArn: !Sub arn:aws:s3:::${SourceBucketName}

Conditions:
  ShouldCreateSourceBucket:
    !Equals [ !Ref CreateSourceBucket, 'yes' ]
  ShouldCreateDestinationBucket:
    !Equals [ !Ref CreateDestinationBucket, 'yes' ]